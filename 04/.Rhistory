y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
}
real_posterior(dataMoneda$Resultado)
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e6, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
aprox$x
# globe tossing model posterior using grid approximation
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
dens(samples)
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
dens(samples)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
grid_aprox <- function(data, grid_size=1000){
sum_data_1 <- data$sum_data_1
total <- data$total
# define grid
p_grid <- seq(from=0 , to=1 , length.out=grid_size)
# define prior
prior <- rep(1 , grid_size)
# compute likelihood at each value in grid
likelihood <- dbinom(sum_data_1 , size=total, prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
return(list(x=p_grid, y=posterior))
}
plots_aprox(dataMoneda$Resultado, grid_aprox)
# globe tossing model posterior using grid approximation
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
dens(samples)
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
dens(samples)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
grid_aprox <- function(data, grid_size=500){
sum_data_1 <- data$sum_data_1
total <- data$total
# define grid
p_grid <- seq(from=0 , to=1 , length.out=grid_size)
# define prior
prior <- rep(1 , grid_size)
# compute likelihood at each value in grid
likelihood <- dbinom(sum_data_1 , size=total, prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
return(list(x=p_grid, y=posterior))
}
plots_aprox(dataMoneda$Resultado, grid_aprox)
# globe tossing model posterior using grid approximation
p_grid <- seq( from=0 , to=1 , length.out=1000 )
prior <- rep( 1 , 1000 )
likelihood <- dbinom( 6 , size=9 , prob=p_grid )
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)
samples <- sample( p_grid , prob=posterior , size=1e4 , replace=TRUE )
dens(samples)
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
grid_aprox <- function(data, grid_size=100){
sum_data_1 <- data$sum_data_1
total <- data$total
# define grid
p_grid <- seq(from=0 , to=1 , length.out=grid_size)
# define prior
prior <- rep(1 , grid_size)
# compute likelihood at each value in grid
likelihood <- dbinom(sum_data_1 , size=total, prob=p_grid )
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
return(list(x=p_grid, y=posterior))
}
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data, grid_size = 1000)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
bounds <- function(data, low, upp){
prop <- sum(data>=low & data<=upp)/1e6
return(prop)
}
bounds(samples, 0, 0.4)
bounds <- function(data, low, upp, grid_size=100){
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
prop <- sum(data>=low & data<=upp)/1e6
return(prop)
}
bounds(dataMoneda$Resultado, 0, 0.4)
bounds(dataMoneda$Resultado, 0, 0.4, 1000)
bounds(dataMoneda$Resultado, 0, 0.4, 1000)
bounds(dataMoneda$Resultado, 0, 0.4, 1000)
bounds(dataMoneda$Resultado, 0, 0.4, 1000)
bounds <- function(data, low, upp, grid_size=100){
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
prop <- sum(data>=low & data<=upp)/1e6
return(prop)
}
bounds(dataMoneda$Resultado, 0, 0.4, 1000)
bounds(dataMoneda$Resultado, 0, 0.4, 1000)
bounds <- function(data, low, upp, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
prop <- sum(samples>=low & samples<=upp)/1e6
return(prop)
}
bounds(dataMoneda$Resultado, 0, 0.4, 1000)
bounds(dataMoneda$Resultado, 0, 0.4, 100)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0.4, 0.7)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds <- function(data, low, upp, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
prop <- sum(samples>=low & samples<=upp)/1e4
return(prop)
}
bounds(dataMoneda$Resultado, 0.4, 0.7)
bounds <- function(data, low, upp, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e1, replace=TRUE)
prop <- sum(samples>=low & samples<=upp)/1e1
return(prop)
}
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0, 0.4, 10)
credible_intervals <- function(data, p, sample_size=NULL){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
interval <- PI(samples, prob=p)
return(interval)
}
credible_intervals(dataMoneda$Resultado, 0.5)
credible_intervals <- function(data, p, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
interval <- PI(samples, prob=p)
return(interval)
}
credible_intervals(dataMoneda$Resultado, 0.5)
credible_intervals <- function(data, p, grid_size=1000){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
interval <- PI(samples, prob=p)
return(interval)
}
credible_intervals(dataMoneda$Resultado, 0.5)
credible_intervals(dataMoneda$Resultado, 0.5)
credible_intervals(dataMoneda$Resultado, 0.5)
credible_intervals(dataMoneda$Resultado, 0.5)
hdpi <- function(data, p, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
interval <- HPDI(samples, prob=p)
return(interval)
}
hdpi(dataMoneda$Resultado, 0.5)
hdpi(dataMoneda$Resultado, 0.5)
hdpi(dataMoneda$Resultado, 0.75)
hdpi(dataMoneda$Resultado, 0.95)
y_binom_map <- rbinom(1e5, size=500, prob=max_p)
x <- df_mor$x
format_data <- fun_data(total)
m1 <- df$bites_month_1
df = read.csv("no+mordidas.csv")
head(df)
m1 <- df$bites_month_1
m2 <- df$bites_month_2
total <- append(m1, m2)
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =title)
return(plot)
}
format_data <- fun_data(total)
aprox <- grid_aprox(format_data)
df_mor <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor, format_data$total, "Distribución de probabilidad de que un cartero sea mordido")
x <- df_mor$x
y <- df_mor$y
max_index <- which(y %in% max(y))
max_p <- x[max_index]
max_p
plot_his <- function(y_binom, title){
y_binom <- y_binom
plot <- ggplot(data.frame(x=y_binom), aes(x=x)) +
geom_histogram(binwidth = 2) +
labs(x="Número de carteros mordidos",
y="Frecuencia",
title=title)
return(plot)
}
y_binom_map <- rbinom(1e5, size=500, prob=max_p)
plot_his(y_binom_map, "Histograma nuevas predicciones utilizando MAP")
samples <- sample(x, prob=y, size=1e4, replace=TRUE)
y_binom_samples <- rbinom(1e5, size=500, prob=samples)
title ="Histograma nuevas predicciones utilizando la distribución aproximada
de la variable p (probabilidad de que un cartero sea mordido)"
plot_his(y_binom_samples, title)
m1_1 <- which(m1==1)
m2_1 <- m2[m1_1]
m1_m2_1 <- m2[m2_1]
m1_m2_1 <- append(m1_m2_1, rep(0, 250-length(m1_m2_1)))
format_data <- fun_data(m1_m2_1)
aprox <- grid_aprox(format_data)
df_mor_1_2 <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor_1_2, format_data$total, "Distribución de probabilidad de que un cartero sea mordido\nlos dos meses")
x <- df_mor$x
y <- df_mor$y
max_index <- which(y %in% max(y))
max_p <- x[max_index]
max_p
x <- df_mor_1_2$x
y <- df_mor_1_2$y
max_index <- which(y %in% max(y))
max_p <- x[max_index]
max_p
y_binom_map <- rbinom(1e5, size=500, prob=max_p)
plot_his(y_binom_map, "Histograma nuevas predicciones utilizando MAP")
samples <- sample(x, prob=y, size=1e4, replace=TRUE)
y_binom_samples <- rbinom(1e5, size=500, prob=samples)
title ="Histograma nuevas predicciones utilizando la distribución aproximada
de la variable p (probabilidad de que un cartero sea mordido)"
plot_his(y_binom_samples, title)
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =paste(title, ", Grid Approximation")
return(plot)
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =paste(title, ", Grid Approximation"))
return(plot)
}
format_data <- fun_data(total)
aprox <- grid_aprox(format_data)
df_mor <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor, format_data$total, "Distribución de probabilidad de que un cartero sea mordido")
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =paste(title, "\n, Grid Approximation"))
return(plot)
}
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =paste(title, "\n, Grid Approximation"))
return(plot)
}
format_data <- fun_data(total)
aprox <- grid_aprox(format_data)
df_mor <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor, format_data$total, "Distribución de probabilidad de que un cartero sea mordido")
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =paste(title, "\n Grid Approximation"))
return(plot)
}
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =paste(title, "\n Grid Approximation"))
return(plot)
}
format_data <- fun_data(total)
aprox <- grid_aprox(format_data)
df_mor <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor, format_data$total, "Distribución de probabilidad de que un cartero sea mordido")
plot_grid <- function(data, n, title){
plot <- add_curve(ggplot(), data, n, TRUE)
plot <- plot + xlim(c(0, 1)) +
guides(fill=guide_legend(title="Sample size")) +
scale_colour_manual("Sample size",
breaks = c(as.character(n)),
values = c("black")) +
labs(x="Probabilidad de ser mordido",
y="Probabilidad de obtener x probabilidad",
title =paste(title, "\nGrid Approximation"))
return(plot)
}
format_data <- fun_data(total)
aprox <- grid_aprox(format_data)
df_mor <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor, format_data$total, "Distribución de probabilidad de que un cartero sea mordido")
plots_aprox(dataMoneda$Resultado, grid_aprox)
laplace_aprox <- function(data, sample_size){
sum_data_0 = data$sum_data_0
sum_data_1 = data$sum_data_1
results <- quap(
alist(
W ~ dbinom(W+L, p),
p ~ dunif(0,1)
),
data=list(W=sum_data_1, L=sum_data_0))
results <- precis(results)
pop_mean <- results$mean
pop_sd <- results$sd
x <- seq(-6, 6, length = 1000) * pop_sd + pop_mean
y <- dnorm(x, pop_mean, pop_sd)
y <- y /sum(y)
return(list(x=x, y=y))
}
plots_aprox(dataMoneda$Resultado, laplace_aprox, plot_p=FALSE)
format_data <- fun_data(dataMoneda$Resultado)
aprox <- grid_aprox(format_data, grid_size = 1000)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
ggplot(data=data.frame(x=samples)) +
geom_density(aes(x=x)) +
# xlim(c(0.2,0.8)) +
labs(x="Probabilidad de obtener cara",
y="Probabilidad de obtener x probabilidad",
title = paste("Real posterior"))
bounds <- function(data, low, upp, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=10, replace=TRUE)
prop <- sum(samples>=low & samples<=upp)/10
return(prop)
}
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0.4, 0.7)
bounds(dataMoneda$Resultado, 0.7, 1)
bounds <- function(data, low, upp, grid_size=10){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=10, replace=TRUE)
prop <- sum(samples>=low & samples<=upp)/10
return(prop)
}
bounds(dataMoneda$Resultado, 0, 0.4, 10)
bounds(dataMoneda$Resultado, 0.4, 0.7)
bounds(dataMoneda$Resultado, 0.7, 1)
credible_intervals(dataMoneda$Resultado, 0.5)
credible_intervals(dataMoneda$Resultado, 0.75)
credible_intervals(dataMoneda$Resultado, 0.95)
hdpi <- function(data, p, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
interval <- HPDI(samples, prob=p)
return(interval)
}
hdpi(dataMoneda$Resultado, 0.5)
hdpi(dataMoneda$Resultado, 0.75)
hdpi(dataMoneda$Resultado, 0.95)
m1_1 <- which(m1==1)
m2_1 <- m2[m1_1]
m1_m2_1 <- m2[m2_1]
m1_m2_1 <- append(m1_m2_1, rep(0, 250-length(m1_m2_1)))
format_data <- fun_data(m1_m2_1)
aprox <- grid_aprox(format_data)
df_mor_1_2 <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor_1_2, format_data$total, "Distribución de probabilidad de que un cartero sea mordido\nlos dos meses")
x <- df_mor_1_2$x
y <- df_mor_1_2$y
max_index <- which(y %in% max(y))
max_p <- x[max_index]
max_p
y_binom_map <- rbinom(1e5, size=500, prob=max_p)
plot_his(y_binom_map, "Histograma nuevas predicciones utilizando MAP")
samples <- sample(x, prob=y, size=1e4, replace=TRUE)
y_binom_samples <- rbinom(1e5, size=500, prob=samples)
title ="Histograma nuevas predicciones utilizando la distribución aproximada
de la variable p (probabilidad de que un cartero sea mordido)"
plot_his(y_binom_samples, title)
