hdpi <- function(data, p, grid_size=100){
format_data <- fun_data(data)
aprox <- grid_aprox(format_data, grid_size = grid_size)
samples <- sample(aprox$x, prob=aprox$y, size=1e4, replace=TRUE)
interval <- HPDI(samples, prob=p)
return(interval)
}
hdpi(dataMoneda$Resultado, 0.5)
hdpi(dataMoneda$Resultado, 0.75)
hdpi(dataMoneda$Resultado, 0.95)
m1_1 <- which(m1==1)
m2_1 <- m2[m1_1]
m1_m2_1 <- m2[m2_1]
m1_m2_1 <- append(m1_m2_1, rep(0, 250-length(m1_m2_1)))
format_data <- fun_data(m1_m2_1)
aprox <- grid_aprox(format_data)
df_mor_1_2 <- data.frame(x=aprox$x, y=aprox$y)
plot_grid(df_mor_1_2, format_data$total, "Distribución de probabilidad de que un cartero sea mordido\nlos dos meses")
x <- df_mor_1_2$x
y <- df_mor_1_2$y
max_index <- which(y %in% max(y))
max_p <- x[max_index]
max_p
y_binom_map <- rbinom(1e5, size=500, prob=max_p)
plot_his(y_binom_map, "Histograma nuevas predicciones utilizando MAP")
samples <- sample(x, prob=y, size=1e4, replace=TRUE)
y_binom_samples <- rbinom(1e5, size=500, prob=samples)
title ="Histograma nuevas predicciones utilizando la distribución aproximada
de la variable p (probabilidad de que un cartero sea mordido)"
plot_his(y_binom_samples, title)
prod(1:7)
prod(1:3)
# Leer información
data_notas <- read.csv("notas.csv")
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
.... # Funcion de likelihood
}
# Valores de la grilla
grid_mu <- seq(from=0.5 , to=1.5 , length.out=grid_size)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
.... # Funcion de likelihood
}
# Valores de la grilla
grid_mu <- seq(from=0.5 , to=1.5 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
head(data_notas)
prop(2,3)
prod(2,3)
append(rep(2, grid_size/2), rep(1, grid_size/2))
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
prod(mu, sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Manipulación de estructuras
library(tidyverse)
library(dplyr)
library(tidyr)
library(purrr)
# Para realizar plots
library(scatterplot3d)
library(ggplot2)
library(plotly)
# Manipulación de varios plots en una imagen.
library(gridExtra)
# Análisis bayesiano
library(rethinking)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
prod(mu, sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu,prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu,prior$prior_sigma, prod)
data_grid <- unnest(data_grid,cols = c("prior"))
# Se calcula el posterior
data_grid$unstd_posterior <-  data_grid$likelihood * data_grid$prior
# Se estandariza el posterior
data_grid$posterior <- data_grid$unstd_posterior/sum(data_grid$unstd_posterior)
# Se ajustan los valores de la posterior para que no sean valores tan pequñeos
data_grid$posterior <- (data_grid$posterior - min(data_grid$posterior))/(max(data_grid$posterior)-min(data_grid$posterior))
dnorm
?dnorm
dnorm(1,10,10)
prod(dnorm(mu,sigma))
map2(c(1,2,3), c(1,2,3), +)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
return(mu+sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu,prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu,prior$prior_sigma, prod)
data_grid <- unnest(data_grid,cols = c("prior"))
# Se calcula el posterior
data_grid$unstd_posterior <-  data_grid$likelihood * data_grid$prior
# Se estandariza el posterior
data_grid$posterior <- data_grid$unstd_posterior/sum(data_grid$unstd_posterior)
# Se ajustan los valores de la posterior para que no sean valores tan pequñeos
data_grid$posterior <- (data_grid$posterior - min(data_grid$posterior))/(max(data_grid$posterior)-min(data_grid$posterior))
# Se ajustan los valores de la posterior para que no sean valores tan pequñeo
map2(c(1,2,3), c(1,2,3), grid_function)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
mu+sigma
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu,prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu,prior$prior_sigma, prod)
data_grid <- unnest(data_grid,cols = c("prior"))
# Se calcula el posterior
data_grid$unstd_posterior <-  data_grid$likelihood * data_grid$prior
# Se estandariza el posterior
data_grid$posterior <- data_grid$unstd_posterior/sum(data_grid$unstd_posterior)
# Se ajustan los valores de la posterior para que no sean valores tan pequñeos
data_grid$posterior <- (data_grid$posterior - min(data_grid$posterior))/(max(data_grid$posterior)-min(data_grid$posterior))
map2(c(1,2,3), c(1,2,3), grid_function)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
mu+sigma
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu,prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu,prior$prior_sigma, prod)
data_grid <- unnest(data_grid,cols = c("prior"))
# Se calcula el posterior
data_grid$unstd_posterior <-  data_grid$likelihood * data_grid$prior
# Se estandariza el posterior
data_grid$posterior <- data_grid$unstd_posterior/sum(data_grid$unstd_posterior)
# Se ajustan los valores de la posterior para que no sean valores tan pequñeos
data_grid$posterior <- (data_grid$posterior - min(data_grid$posterior))/(max(data_grid$posterior)-min(data_grid$posterior))
map2(c(1,2,3), c(1,2,3), grid_function)
data_notas
mean(data_notas)
mean(data_notas$Notas)
dnorm(1)
dnorm(1)
dnorm(1)
qnorm(1)
pnorm(1)
pnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
data_grid$grid_mu
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
dnorm(data_notas$Notas, mean = mu, sd = sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu,prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu,prior$prior_sigma, prod)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
dnorm(data_notas$Notas, mean = mu, sd = sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu,prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu,prior$prior_sigma, prod)
length(prior_sigma)
length(prior_mu)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
dnorm(data_notas$Notas, mean = mu, sd = sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu,prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu,prior$prior_sigma, prod)
prior$prior_mu
length(prior$prior_mu)
length(prior$prior_sigma)
prod()
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
dnorm(data_notas$Notas, mean = mu, sd = sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu, prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu, prior$prior_sigma, prod)
map2(c(1,2,3), c(1,2,3), prod)
data_grid$prior
map2(prior$prior_mu, prior$prior_sigma, prod)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
dnorm(mean(data_notas$Notas), mean = mu, sd = sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu, prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu, prior$prior_sigma, prod)
data_grid <- unnest(data_grid,cols = c("prior"))
# Se calcula el posterior
data_grid$unstd_posterior <-  data_grid$likelihood * data_grid$prior
# Se estandariza el posterior
data_grid$posterior <- data_grid$unstd_posterior/sum(data_grid$unstd_posterior)
# Se ajustan los valores de la posterior para que no sean valores tan pequñeos
data_grid$posterior <- (data_grid$posterior - min(data_grid$posterior))/(max(data_grid$posterior)-min(data_grid$posterior))
# Punto de referencia
# Se recomienda cambiar estos valores por unos adecuados que le permitan estudiar
# Los valores de la distribución de mejor manera
valor_x <- 1
valor_y <- 1
# Grafico
punto_comparacion <- tibble(x = valor_x, y = valor_y)
plt <- data_grid %>%
ggplot(aes(x = grid_mu, y = grid_sigma)) +
geom_raster(aes(fill = posterior),
interpolate = T
)+
geom_point(x = valor_x, y = valor_y, size = 1.3,color="white")+
geom_label(
data = punto_comparacion, aes(x, y),
label = "Punto Comparación",
fill = "green",
color = "black",
nudge_y = 0, # Este parametro desplaza la caja por el eje y
nudge_x = 1 # Este parametro desplaza la caja por el eje x
)+
scale_fill_viridis_c() +
labs(
title = "Posterior para Mean y Standard Deviation",
x = expression(mu ["Mean"]),
y = expression(sigma ["Standar Deviation"])
) +
theme(panel.grid = element_blank())
plt
# Codificamos los datos
x <- 1:length(data_grid$posterior)
# Sampleamos los indices
posterior_samples_aux <- sample(x,size = 1e4, replace = T, prob = data_grid$posterior)
# Obtenemos los verdaderos valores de la sampling distribution
posterior_samples <- data_grid[posterior_samples_aux,]
# Obtenemos solos los valores relevantes para la densidad
df <- data.frame(posterior_samples$grid_mu,posterior_samples$grid_sigma)
# Realizamos las densidades
dens(df)
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
dnorm(1, mean = mu, sd = sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu, prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu, prior$prior_sigma, prod)
data_grid <- unnest(data_grid,cols = c("prior"))
# Se calcula el posterior
data_grid$unstd_posterior <-  data_grid$likelihood * data_grid$prior
# Se estandariza el posterior
data_grid$posterior <- data_grid$unstd_posterior/sum(data_grid$unstd_posterior)
# Se ajustan los valores de la posterior para que no sean valores tan pequñeos
data_grid$posterior <- (data_grid$posterior - min(data_grid$posterior))/(max(data_grid$posterior)-min(data_grid$posterior))
# Punto de referencia
# Se recomienda cambiar estos valores por unos adecuados que le permitan estudiar
# Los valores de la distribución de mejor manera
valor_x <- 1
valor_y <- 1
# Grafico
punto_comparacion <- tibble(x = valor_x, y = valor_y)
plt <- data_grid %>%
ggplot(aes(x = grid_mu, y = grid_sigma)) +
geom_raster(aes(fill = posterior),
interpolate = T
)+
geom_point(x = valor_x, y = valor_y, size = 1.3,color="white")+
geom_label(
data = punto_comparacion, aes(x, y),
label = "Punto Comparación",
fill = "green",
color = "black",
nudge_y = 0, # Este parametro desplaza la caja por el eje y
nudge_x = 1 # Este parametro desplaza la caja por el eje x
)+
scale_fill_viridis_c() +
labs(
title = "Posterior para Mean y Standard Deviation",
x = expression(mu ["Mean"]),
y = expression(sigma ["Standar Deviation"])
) +
theme(panel.grid = element_blank())
plt
# Leer información
data_notas <- read.csv("notas.csv")
grid_size <- 100
# Función para crear likelihood dado mu y sigma
grid_function <- function(mu,sigma){
dnorm(mean(data_notas$Notas), mean = mu, sd = sigma)
}
# Valores de la grilla
grid_mu <- seq(from=1 , to=7 , length.out=grid_size)
grid_sigma <- seq(from=0.5, to=1.5, length.out=grid_size)
# Se crea la grilla 2d
data_grid <- expand_grid(grid_mu,grid_sigma)
# Se guarda la likelihod
data_grid$likelihood <- map2(data_grid$grid_mu,data_grid$grid_sigma, grid_function)
# Se transforma el forma de map2 a una columna
data_grid <- unnest(data_grid,cols = c("likelihood"))
# Valores de los priors
prior_mu <- rep(1 , grid_size)
prior_sigma <- append(rep(2, grid_size/2), rep(1, grid_size/2))
# Se crea la grilla 2d de priors
prior <- expand_grid(prior_mu, prior_sigma)
# Se calculan los valores del prior
data_grid$prior <-  map2(prior$prior_mu, prior$prior_sigma, prod)
data_grid <- unnest(data_grid,cols = c("prior"))
# Se calcula el posterior
data_grid$unstd_posterior <-  data_grid$likelihood * data_grid$prior
# Se estandariza el posterior
data_grid$posterior <- data_grid$unstd_posterior/sum(data_grid$unstd_posterior)
# Se ajustan los valores de la posterior para que no sean valores tan pequñeos
data_grid$posterior <- (data_grid$posterior - min(data_grid$posterior))/(max(data_grid$posterior)-min(data_grid$posterior))
dnorm(1)
# Punto de referencia
# Se recomienda cambiar estos valores por unos adecuados que le permitan estudiar
# Los valores de la distribución de mejor manera
valor_x <- 1
valor_y <- 1
# Grafico
punto_comparacion <- tibble(x = valor_x, y = valor_y)
plt <- data_grid %>%
ggplot(aes(x = grid_mu, y = grid_sigma)) +
geom_raster(aes(fill = posterior),
interpolate = T
)+
geom_point(x = valor_x, y = valor_y, size = 1.3,color="white")+
geom_label(
data = punto_comparacion, aes(x, y),
label = "Punto Comparación",
fill = "green",
color = "black",
nudge_y = 0, # Este parametro desplaza la caja por el eje y
nudge_x = 1 # Este parametro desplaza la caja por el eje x
)+
scale_fill_viridis_c() +
labs(
title = "Posterior para Mean y Standard Deviation",
x = expression(mu ["Mean"]),
y = expression(sigma ["Standar Deviation"])
) +
theme(panel.grid = element_blank())
plt
