col="red",
lwd = 1.5
)
# Gráfico de la convergencia
# Creamos una función que simule el juego
montyhall <- function(cambiar_puerta = TRUE){
puertas <- c(1,2,3)
# Se escoge la puerta del premio
premio <- sample(1:3, 1)
# El juegador escoge su puerta
eleccion <- sample(1:3, 1)
# Se escoge la puerta a eliminar
# (no puede ser la puerta ganadora ni la puerta del jugador)
puertas[premio] <- 0
puertas[eleccion] <- 0
vacia <- max(puertas)
# se reestablecen la puerta ganadora y la puerta del jugador
puertas[premio] <- premio
puertas[eleccion] <- eleccion
# se elimina la puerta que no contiene el premio
puertas[vacia] <-0
if(cambiar_puerta==TRUE){
puertas[eleccion] <-0
}
else{
puertas[puertas!=eleccion]<-0
}
return(sum(puertas)==premio)
}
# Función que simula N juegos
n_juegos <- function(n = 10 , cambiar_puerta = TRUE){
x <- 1:n
y <- c()
prob <- 0
for(i in 1:n){
bool = montyhall(cambiar_puerta)
if(bool){
prob = prob + 1
}
y <- append(y, prob/i)
}
return(y)
}
# Función que compara n juegos cambiando la puerta versus
# n juegos sin cambiar la puerta
compare <- function(n=1000){
x <- 1:n
y_cambiar <- n_juegos(n)
y_no_cambiar <- n_juegos(n, cambiar_puerta = FALSE)
plot(x,
y_cambiar,
type = "l",
main="Convergencia de probabilidad de ganar Monty hall cuando se \n cambia la puerta versus cuando no se cambia la puerta",
xlab="Número de juegos",
ylab="Probabildiad",
ylim=c(0,1),
lwd = 1.5
)
#
lines(x,
y_no_cambiar,
type="l",
col="red",
lwd = 1.5)
legend(x="topright",
legend=c("Cambiar puerta", "No cambiar puerta"),
lty=c(1,1),
col=c("black", "red"),
lwd = 3
)
}
compare()
A_B_vs_AB <- function(n, L_A, L_B, L_AB){
y_A_B <- c()
y_AB <- c()
prob_A <- 0
prob_B <- 0
prob_AB <- 0
for (i in 1:n){
d1 = sample(1:6, 1)
d2 = sample(1:6, 1)
d3 = sample(1:6, 1)
if(is.element(d1, L_A)){
prob_A = prob_A + 1
}
if(is.element(d2, L_B)){
prob_B = prob_B + 1
}
if (is.element(d3, L_AB)){
prob_AB = prob_AB + 1
}
y_A_B = append(y_A_B, ((prob_A/i)*(prob_B/i)))
y_AB = append(y_AB, prob_AB/i)
}
plot(1:n,
y_AB,
type = "l",
main="Convergencia de probabilidad P(A,B) versus convergencia \n de probabilidad P(A)*P(B)",
xlab="Número de lanzamientos",
ylab="Probabildiad",
ylim=c(0,1),
lwd = 1.5
)
#
lines(1:n,
y_A_B,
type="l",
col="red",
lwd = 1.5)
legend(x="topright",
legend=c("P(A,B)", "P(A)*P(B)"),
lty=c(1,1),
col=c("black", "red"),
lwd = 3
)
}
# Primer grupo de eventos
N_lan = 5000 # Numero de lanzamientos
L_A = c(1,2,6) # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1,2,3,4) # Lanzamientos favorables B = c(1, 2, 3, 4)
L_AB = c(1,2) # Lanzamientos favorables AB = c(1, 2)
A_B_vs_AB(N_lan, L_A, L_B, L_AB)
# Segundo grupo de eventos
N_lan = 5000 # Numero de lanzamientos
L_A =  c(1, 2, 6)# Lanzamientos favorables A = c(1, 2, 6)
L_B =  c(1, 2, 3) # Lanzamientos favorables B = c(1, 2, 3)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
A_B_vs_AB(N_lan, L_A, L_B, L_AB)
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
i <- 0
y <- c(fondos)
while (0<fondos & fondos<200) {
if(sample(1:19,1)< 10){
fondos <- fondos + apuesta
}
else{
fondos <- fondos - apuesta
}
y <- append(y, fondos)
}
return(y) # Devuelve un vector con el desarrollo de los fondos
}
ruina_real <- function(fondos = 100, apuesta = 5){
i <- 0
y <- c(fondos)
while (0<fondos) {
if(sample(1:19,1)< 10){
fondos <- fondos + apuesta
}
else{
fondos <- fondos - apuesta
}
y <- append(y, fondos)
}
return(y) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
plot(ruina_real(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina_real(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina_real(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
plot(ruina_real(apuesta = 0.1), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 0.1)")
my_data_2 = my_data[my_data$target=="TRUE"]
my_data_2
head(my_data_2)
my_data_2 = my_data[my_data$target==TRUE]
head(my_data)
my_data_2 = my_data[my_data$target=="YES"]
my_data_2 = my_data[my_data$target==TRUE]
my_data_2 = my_data[my_data$target=="YES"]
my_data_2 = my_data[my_data$target==YES]
head(my_data)
my_data[,1]
my_data[1,]
my_data_2 = my_data[,my_data$target="YES"]
my_data_y <- my_data[my_data$target %in% c("YES"),]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
my_data_2 = my_da
my_data_y
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
# my_data_num <- my_data[sapply(my_data, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
ggplot(gather(my_data_n_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
ggplot(gather(my_data_n_num, cols, value), aes(x = value, title = "HOLA")) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
ggplot(gather(my_data_n_num, cols, value), aes(x = value,)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols) + ggtile("hola")
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols)
ggplot(gather(my_data_n_num, cols, value), aes(x = value,)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols) + ggtitle("hola")
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols) + ggtitle("Histrograma variables númericas cuando target='YES'")
ggplot(gather(my_data_n_num, cols, value), aes(x = value,)) +
geom_histogram(binwidth = 20) + facet_grid(.~cols) + ggtitle("Histrograma variables númericas cuando target='NO'")
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 10) + facet_grid(.~cols) + ggtitle("Histrograma variables númericas cuando target='YES'")
ggplot(gather(my_data_n_num, cols, value), aes(x = value,)) +
geom_histogram(binwidth = 10) + facet_grid(.~cols) + ggtitle("Histrograma variables númericas cuando target='NO'")
my_data <- read.table(file="hearth_database.csv", header=T, sep=",")
summary(my_data)
my_data_num <- my_data[sapply(my_data, is.numeric)]
cor(my_data_num)
pairs(my_data_num)
boxplot(my_data_num)
my_data_y <- my_data[my_data$target %in% c("YES"),]
my_data_n <- my_data[my_data$target %in% c("NO"),]
my_data_y_num <- my_data_y[sapply(my_data_y, is.numeric)]
my_data_n_num <- my_data_n[sapply(my_data_n, is.numeric)]
library(ggplot2)
library(tidyr)
ggplot(gather(my_data_y_num, cols, value), aes(x = value)) +
geom_histogram(binwidth = 10) + facet_grid(.~cols) + ggtitle("Histrograma variables númericas cuando target='YES'")
ggplot(gather(my_data_n_num, cols, value), aes(x = value,)) +
geom_histogram(binwidth = 10) + facet_grid(.~cols) + ggtitle("Histrograma variables númericas cuando target='NO'")
hist_and_norm <- function(n, distri){
# Se genera el vector de tamaño n con medias de tamaño 1000
means <- c()
for (i in 1:n){
means = append(means, mean(distri()))
}
# Se crea el histograma de medias
h = hist(means,
plot=FALSE,
)
# distribución normal
xfit <- seq(min(means)-0.1, max(means)+0.1, length=1000)
yfit <- dnorm(xfit, mean = mean(means), sd=sd(means))
yfit <- yfit * diff(h$mids[1:2]) * (length(means))
# Se plotea el histograma
plot(h,
# freq=FALSE,
main=paste("Histograma de ", n, " medias de tamaño 1000"),
xlab="Valor media",
ylab="Densidad",
ylim=c(0,max(yfit, h$counts)),
col="gray"
)
# Se plotea la distribución normal
lines(xfit, yfit, lwd=2)
}
my_poisson <- function(){
return(rpois(1000, 1))
}
my_exp <- function(){
return(rexp(1000, 1))
}
my_chi <- function(){
return(rchisq(1000, 1))
}
my_plots <- function(distri){
muestras <- c(10, 100, 1000, 5000)
for (i in muestras){
hist_and_norm(i, distri)
}
}
my_plots(my_poisson)
muestras <- c(10, 100, 1000, 5000)
for(i in muestras){
hist_and_norm(i, my_exp)
}
muestras <- c(10, 100, 1000, 5000)
for(i in muestras){
hist_and_norm(i, my_chi)
}
n <- 1000
y <- c()
x <- 1:n
prob <- 0
for(i in x){
lanzamiento <- sample.int(5,1)
if (lanzamiento < 5){
prob <- (prob + 1)
}
y <- append(y, prob/i)
}
plot(x,
y,
type = "l",
main="Convergencia de probabilidad de obtener cara al lanzar una \n moneda cargada con una probabilidad 0.8 de obtener cara",
xlab="Número de lanzamientos",
ylab="Probabildiad",
ylim=c(0,1),
lwd = 1.5
)
lines(x,
rep(0.8, n),
type="l",
col="red",
lwd = 1.5
)
# Gráfico de la convergencia
# Creamos una función que simule el juego
montyhall <- function(cambiar_puerta = TRUE){
puertas <- c(1,2,3)
# Se escoge la puerta del premio
premio <- sample(1:3, 1)
# El juegador escoge su puerta
eleccion <- sample(1:3, 1)
# Se escoge la puerta a eliminar
# (no puede ser la puerta ganadora ni la puerta del jugador)
puertas[premio] <- 0
puertas[eleccion] <- 0
vacia <- max(puertas)
# se reestablecen la puerta ganadora y la puerta del jugador
puertas[premio] <- premio
puertas[eleccion] <- eleccion
# se elimina la puerta que no contiene el premio
puertas[vacia] <-0
if(cambiar_puerta==TRUE){
puertas[eleccion] <-0
}
else{
puertas[puertas!=eleccion]<-0
}
return(sum(puertas)==premio)
}
# Función que simula N juegos
n_juegos <- function(n = 10 , cambiar_puerta = TRUE){
x <- 1:n
y <- c()
prob <- 0
for(i in 1:n){
bool = montyhall(cambiar_puerta)
if(bool){
prob = prob + 1
}
y <- append(y, prob/i)
}
return(y)
}
# Función que compara n juegos cambiando la puerta versus
# n juegos sin cambiar la puerta
compare <- function(n=1000){
x <- 1:n
y_cambiar <- n_juegos(n)
y_no_cambiar <- n_juegos(n, cambiar_puerta = FALSE)
plot(x,
y_cambiar,
type = "l",
main="Convergencia de probabilidad de ganar Monty hall cuando se \n cambia la puerta versus cuando no se cambia la puerta",
xlab="Número de juegos",
ylab="Probabildiad",
ylim=c(0,1),
lwd = 1.5
)
#
lines(x,
y_no_cambiar,
type="l",
col="red",
lwd = 1.5)
legend(x="topright",
legend=c("Cambiar puerta", "No cambiar puerta"),
lty=c(1,1),
col=c("black", "red"),
lwd = 3
)
}
compare()
A_B_vs_AB <- function(n, L_A, L_B, L_AB){
y_A_B <- c()
y_AB <- c()
prob_A <- 0
prob_B <- 0
prob_AB <- 0
for (i in 1:n){
d1 = sample(1:6, 1)
d2 = sample(1:6, 1)
d3 = sample(1:6, 1)
if(is.element(d1, L_A)){
prob_A = prob_A + 1
}
if(is.element(d2, L_B)){
prob_B = prob_B + 1
}
if (is.element(d3, L_AB)){
prob_AB = prob_AB + 1
}
y_A_B = append(y_A_B, ((prob_A/i)*(prob_B/i)))
y_AB = append(y_AB, prob_AB/i)
}
plot(1:n,
y_AB,
type = "l",
main="Convergencia de probabilidad P(A,B) versus convergencia \n de probabilidad P(A)*P(B)",
xlab="Número de lanzamientos",
ylab="Probabildiad",
ylim=c(0,1),
lwd = 1.5
)
#
lines(1:n,
y_A_B,
type="l",
col="red",
lwd = 1.5)
legend(x="topright",
legend=c("P(A,B)", "P(A)*P(B)"),
lty=c(1,1),
col=c("black", "red"),
lwd = 3
)
}
# Primer grupo de eventos
N_lan = 5000 # Numero de lanzamientos
L_A = c(1,2,6) # Lanzamientos favorables A = c(1, 2, 6)
L_B = c(1,2,3,4) # Lanzamientos favorables B = c(1, 2, 3, 4)
L_AB = c(1,2) # Lanzamientos favorables AB = c(1, 2)
A_B_vs_AB(N_lan, L_A, L_B, L_AB)
# Segundo grupo de eventos
N_lan = 5000 # Numero de lanzamientos
L_A =  c(1, 2, 6)# Lanzamientos favorables A = c(1, 2, 6)
L_B =  c(1, 2, 3) # Lanzamientos favorables B = c(1, 2, 3)
L_AB = c(1, 2) # Lanzamientos favorables AB = c(1, 2)
A_B_vs_AB(N_lan, L_A, L_B, L_AB)
# Función para obtener el desarrollo de las apuestas
ruina <- function(fondos = 100, apuesta = 5){
i <- 0
y <- c(fondos)
while (0<fondos & fondos<200) {
if(sample(1:19,1)< 10){
fondos <- fondos + apuesta
}
else{
fondos <- fondos - apuesta
}
y <- append(y, fondos)
}
return(y) # Devuelve un vector con el desarrollo de los fondos
}
ruina_real <- function(fondos = 100, apuesta = 5){
i <- 0
y <- c(fondos)
while (0<fondos) {
if(sample(1:19,1)< 10){
fondos <- fondos + apuesta
}
else{
fondos <- fondos - apuesta
}
y <- append(y, fondos)
}
return(y) # Devuelve un vector con el desarrollo de los fondos
}
plot(ruina(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
plot(ruina_real(), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 5)")
plot(ruina_real(apuesta = 25), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 25)")
plot(ruina_real(apuesta = 50), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 50)")
plot(ruina_real(apuesta = 0.1), type="l", col="blue", xlab="N° de juegos", ylab="Fondos", main="Evolución de los fondos (apuesta = 0.1)")
