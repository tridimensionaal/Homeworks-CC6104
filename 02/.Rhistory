# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(53,14))
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
opts$par
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
opts$par[0]
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
opts$par[1]
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
print(paste("El mu óptimo es ", opts$par[1]))
print(paste("El sigma óptimo es ", opts$par[2]))
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
?norm
?qnorm
pnorm(my_data_body$TotalHeight)
qnorm(my_data_body$TotalHeight)
ggplot(my_data_body, aes(x=TotalHeight)) +
geom_density() +
labs(x="Valor variable 'TotalHeight'", y="Densidad", title="Gráfico de densidad para la variable 'TotalHeight'")
# Plot de Likelihood
# - Generar una función de la likelihood de la normal
# - Señalar el rango de valores para observar la solución. Genere un vector con
# los valores
# Plotear gráfico de calor a través filled.contour()
ll_plot <- function(a, b) {
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(-n*log(b) - (n*x_sd^2)/(2*b^2) - (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot)
mu = seq(20, 80, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(5, 23, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
mean(my_data_body$TotalHeight)
sd(my_data_body$TotalHeight)
ggplot(my_data_body, aes(x=TotalHeight)) +
geom_density() +
labs(x="Valor variable 'TotalHeight'", y="Densidad", title="Gráfico de densidad para la variable 'TotalHeight'")
ggplot(my_data_body, aes(x=Age)) +
geom_density() +
labs(x="Valor variable 'TotalHeight'", y="Densidad", title="Gráfico de densidad para la variable 'TotalHeight'")
ggplot(my_data_body, aes(x=HeadCircumference)) +
geom_density() +
labs(x="Valor variable 'TotalHeight'", y="Densidad", title="Gráfico de densidad para la variable 'TotalHeight'")
ggplot(my_data_body, aes(x=Waist)) +
geom_density() +
labs(x="Valor variable 'TotalHeight'", y="Densidad", title="Gráfico de densidad para la variable 'TotalHeight'")
ggplot(my_data_body, aes(x=Hips)) +
geom_density() +
labs(x="Valor variable 'TotalHeight'", y="Densidad", title="Gráfico de densidad para la variable 'TotalHeight'")
ggplot(my_data_body, aes(x=Age)) +
geom_density() +
labs(x="Valor variable 'TotalHeight'", y="Densidad", title="Gráfico de densidad para la variable 'TotalHeight'")
ggplot(my_data_body, aes(x=HeadCircumference)) +
geom_density() +
labs(x="Valor variable 'HeadCircumference'", y="Densidad", title="Gráfico de densidad para la variable 'HeadCircumference'")
ll_plot_2 <- function(a, b) {
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(n*log(b) + (n*x_sd^2)/(2*b^2) + (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot)
mu = seq(20, 80, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(5, 23, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
ll_plot_2 <- function(a, b) {
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(n*log(b) + (n*x_sd^2)/(2*b^2) + (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot_2)
mu = seq(20, 80, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(5, 23, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
mean(my_data_body$HeadCircumference)
sd(my_data_body$HeadCircumference)
ll_plot_2 <- function(a, b) {
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(n*log(b) + (n*x_sd^2)/(2*b^2) + (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot_2)
mu = seq(10, 50, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(1, 10, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
ll_plot_2 <- function(a, b) {
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(n*log(b) + (n*x_sd^2)/(2*b^2) + (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot_2)
mu = seq(10, 30, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(1, 10, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(21, 6) , lower=c(18,4) , upper=c(25,10))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
mean(my_data_body$HeadCircumference)
sd(my_data_body$HeadCircumference)
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(20, 5) , lower=c(15,2) , upper=c(25,8))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(25, 5) , lower=c(15,2) , upper=c(30,8))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(25, 5) , lower=c(10,2) , upper=c(30,8))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(22, 5) , lower=c(20,2) , upper=c(25,8))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(25, 5) , lower=c(10,2) , upper=c(30,8))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(25, 5) , lower=c(10,2) , upper=c(60,10))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(25, 5) , lower=c(10,2) , upper=c(100,10))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
ll_plot_2 <- function(a, b) {
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(n*log(b) + (n*x_sd^2)/(2*b^2) + (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot_2)
mu = seq(10, 30, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(1, 10, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
ll_plot_2 <- function(a, b) {
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(n*log(b) + (n*x_sd^2)/(2*b^2) + (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot_2)
mu = seq(10, 30, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(1, 10, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
sd(my_data_body$HeadCircumference)
sd(my_data_body$TotalHeight)
ll_plot(10,12)
nrow(my_data_body)
# Plot de Likelihood
# - Generar una función de la likelihood de la normal
# - Señalar el rango de valores para observar la solución. Genere un vector con
# los valores
# Plotear gráfico de calor a través filled.contour()
ll_plot <- function(a, b) {
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(n*log(b) + (n*x_sd^2)/(2*b^2) + (n*(x_b - a)^2)/(2*b^2))
}
# Vectorizamos nuestra función para recorrer y estimar los valores
ll_plot_v = Vectorize(ll_plot)
mu = seq(20, 80, 0.5) # definimos secuencia de 20 -> 80 de 0.5 en 0.5.
sigma = seq(5, 23, 0.5) # definimos secuencia de 5 -> 23 de 0.5 en 0.5.
ll_plot_o = outer(X=mu, Y=sigma, ll_plot_v)
# Obtenemos el mapa de calor con los valores mas probables
filled.contour(x=mu, y=sigma, z=ll_plot_o, xlab=expression(mu),
ylab=expression(sigma))
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(25, 5) , lower=c(10,2) , upper=c(100,10))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood_2 <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood_2, start=c(25, 5) , lower=c(10,2) , upper=c(100,10))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
likelihood_2 <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(-n*log(sigma) - (n*x_sd^2)/(2*sigma^2) - (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts_2 <- nlminb(objective=likelihood_2, start=c(25, 5) , lower=c(10,2) , upper=c(100,10))
print(paste("El mu óptimo es: ", opts_2$par[1]))
print(paste("El sigma óptimo es: ", opts_2$par[2]))
likelihood_2(c(100,2))
likelihood_2(c(20,2))
likelihood_2 <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$HeadCircumference)
x_sd = sd(my_data_body$HeadCircumference)
n = nrow(my_data_body)
return(n*log(sigma) + (n*x_sd^2)/(2*sigma^2) + (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts_2 <- nlminb(objective=likelihood_2, start=c(25, 5) , lower=c(10,2) , upper=c(100,10))
print(paste("El mu óptimo es: ", opts_2$par[1]))
print(paste("El sigma óptimo es: ", opts_2$par[2]))
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(n*log(sigma) + (n*x_sd^2)/(2*sigma^2) + (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
opts <- nlminb(objective=likelihood, start=c(52, 12) , lower=c(50,10) , upper=c(55,14))
mean(my_data_body$TotalHeight)
sd(my_data_body$TotalHeight)
# Obtener la solución que minimiza o maximiza la likelihood
# Producto de como funcionan nlminb es necesario definir un nuevo tipo de función
# para encontrar los parametros de la likelihood, por favor revisar estructura entregada.
likelihood <- function(param) {
# Definimos los parámetros de entrada de la función
mu = param[1]
sigma = param[2]
# Definimos la likelihood como la suma logaritmica de la función de densidad
x_b = mean(my_data_body$TotalHeight)
x_sd = sd(my_data_body$TotalHeight)
n = nrow(my_data_body)
return(n*log(sigma) + (n*x_sd^2)/(2*sigma^2) + (n*(x_b - mu)^2)/(2*sigma^2))
}
# Optimizador para encontrar los parametros de la likelihood. Referencia: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/nlminb
opts <- nlminb(objective=likelihood, start=c(50, 13) , lower=c(40,5) , upper=c(60,20))
print(paste("El mu óptimo es: ", opts$par[1]))
print(paste("El sigma óptimo es: ", opts$par[2]))
# Segunda Parte
# Graficar la densidad y obtener el parámetro de la variable propuesta.
